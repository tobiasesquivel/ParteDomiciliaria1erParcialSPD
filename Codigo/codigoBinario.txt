#include <stdio.h>
#include <stdlib.h>
#include <IRremote.h>

// Funciones

void encenderNumeroCero(void);
void encenderNumeroUno(void);
void encenderNumeroDos(void);
void encenderNumeroTres(void);
void encenderNumeroCuatro(void);
void encenderNumeroCinco(void);
void encenderNumeroSeis(void);
void encenderNumeroSiete(void);
void encenderNumeroOcho(void);
void encenderNumeroNueve(void);

void encenderNumero(int numero);
void apagarLeds(void);

int contarNumerosPrimos(int maximo);
int* obtenerNumerosPrimos(int maximo, int *arraySize);

// Defines

#define A 10
#define B 11
#define C 5
#define D 6
#define E 7
#define F 9
#define G 8

#define UNIDAD A4
#define DECENA A5

#define SWITCH 12

#define PIN_REMOTO 3 
#define BOTON_UNO 18615
#define BOTON_DOS 34935

#define PIN_SENSOR A0

// Variables
bool fuePresionado = false;
int botonPresionado;
int numeroAMostrar = 0;

// Variables primos
bool primosContados = false;
int indiceNumeroPrimo = 0;
int primosSize = 0;
int *numerosPrimos;
int numeroPrimoAMostrar = 0;
bool mostrarPrimos = false;

// Variables enteros

int numeroEnteroActual = 0;

// Variables control remoto

IRrecv control(PIN_REMOTO);

// Variables sensor temperatura

float temperaturaNueva = 0;
float temperaturaFinal = 0;

void setup()
{
  Serial.begin(9600);
  pinMode(4, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(A4, OUTPUT);
  pinMode(A5, OUTPUT);
  pinMode(SWITCH, INPUT);
  
  IrReceiver.begin(PIN_REMOTO, DISABLE_LED_FEEDBACK); 
}

void loop()
{
  temperaturaNueva = (map(analogRead(PIN_SENSOR),0, 1023, -50,450))+1;
  // Seteo de array con numeros primos
  if (primosContados == false)
  {
    primosSize = contarNumerosPrimos(99);
    numerosPrimos = obtenerNumerosPrimos(99,&primosSize);
    primosContados = true;
  }
  // Fin seteo de array con numeros primos

  // Detectar modo Switch
  
  digitalRead(SWITCH) == LOW ? mostrarPrimos = true : mostrarPrimos = false;
  
  // Fin detectar modo Switch
  
    
  // Aumentar contador
  if (digitalRead(4) == LOW && fuePresionado == false){
    botonPresionado = 4;
    mostrarPrimos ? indiceNumeroPrimo++ : numeroEnteroActual++;
    fuePresionado = true;
  }
  // Fin aumentar contador
  
  // Reducir contador
  if (digitalRead(2) == LOW && fuePresionado == false){
    botonPresionado = 2;
    mostrarPrimos ? indiceNumeroPrimo-- : numeroEnteroActual--;
    fuePresionado = true;
  }
  // Fin reducir contador
  
  // Control remoto
  
  if (IrReceiver.decode()){
    switch (IrReceiver.decodedIRData.decodedRawData)
    {
      case 0xEF10BF00:
      mostrarPrimos ? indiceNumeroPrimo++ : numeroEnteroActual++;
      	break;
      case 0xEE11BF00:
      mostrarPrimos ? indiceNumeroPrimo-- : numeroEnteroActual--;
      	break;
      
    }
      control.resume();
    
  }
  // Fin control remoto
  
  
  // Cerrar rango
  
  if (numeroEnteroActual > 99 || numeroEnteroActual < 0)
  {
    numeroEnteroActual = 0;
  }
  if (indiceNumeroPrimo > primosSize - 1 || indiceNumeroPrimo < 0)
  {
    indiceNumeroPrimo = 0;
  }
  

  // Cambio de unidades/decenas
    
  if (digitalRead(UNIDAD) == LOW)
  {
    digitalWrite(DECENA,LOW);
    digitalWrite(UNIDAD,HIGH);  
  }
  else 
  {
    digitalWrite(DECENA,HIGH);
    digitalWrite(UNIDAD,LOW);
  }
  
  // Fin cambio de unidades/decenas
  

  // Calcular primo a mostrar
  
  numeroPrimoAMostrar = *(numerosPrimos + indiceNumeroPrimo);
  
  // Encender los 7segmentos
 if (digitalRead(UNIDAD) == LOW)
 {
   if (mostrarPrimos){
     numeroAMostrar = numeroPrimoAMostrar % 10;
   }
   else {
     numeroAMostrar = numeroEnteroActual % 10;
   }
   
 }
  else
  {
    if (mostrarPrimos){
     numeroAMostrar = numeroPrimoAMostrar / 10;
   }
   else {
     numeroAMostrar = numeroEnteroActual / 10;
   }
  }
  
  encenderNumero(numeroAMostrar);
  // Fin encender los 7segmentos
  
  
  // Controlar rebote
  if (digitalRead(botonPresionado) == HIGH)
  {
    fuePresionado = false;
  }
  
  // Fin control rebote

  // Mostrar temperatura
  if (temperaturaNueva != temperaturaFinal){
    temperaturaFinal = temperaturaNueva;
    Serial.print("La temperatura es de: ");
    Serial.println(temperaturaFinal);
  }
  // Fin mostrar temperatura
  delay(10);
}
 
// Funciones

void encenderNumero(int numero)
{
  apagarLeds();
  switch (numero)
  {
    case 0:
      encenderNumeroCero();
      break;
    case 1:
      encenderNumeroUno();
      break;
    case 2:
      encenderNumeroDos();
      break;
    case 3:
      encenderNumeroTres();
      break;
    case 4:
      encenderNumeroCuatro();
      break;
    case 5:
      encenderNumeroCinco();
      break;
    case 6:
      encenderNumeroSeis();
      break;
    case 7:
      encenderNumeroSiete();
      break;
    case 8:
      encenderNumeroOcho();
      break;
    case 9:
      encenderNumeroNueve();
      break;
  }
}


// Numeros individuales
void encenderNumeroCero(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
    digitalWrite(F, HIGH);
}
void encenderNumeroUno(void)
{
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
}
void encenderNumeroDos(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
  	digitalWrite(G, HIGH);
}
void encenderNumeroTres(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(C, HIGH);
  	digitalWrite(G, HIGH);
}
void encenderNumeroCuatro(void)
{
	digitalWrite(G, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(F, HIGH);
}
void encenderNumeroCinco(void)
{
	digitalWrite(G, HIGH);
    digitalWrite(A, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
  	digitalWrite(F, HIGH);
}
void encenderNumeroSeis(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(G, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
    digitalWrite(F, HIGH);
}
void encenderNumeroSiete(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
}
void encenderNumeroOcho(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
    digitalWrite(F, HIGH);
  	digitalWrite(G, HIGH);
}
void encenderNumeroNueve(void)
{
	digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(F, HIGH);
  	digitalWrite(G, HIGH);
}


// Apagar leds

void apagarLeds(void)
{
	digitalWrite(A, LOW);
    digitalWrite(B, LOW);
  	digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, LOW);
    digitalWrite(F, LOW);
  	digitalWrite(G, LOW);
}

// Numeros primos
int contarNumerosPrimos(int maximo)
{
    int contador = 0;
    for (int i = 2; i < maximo; i++){
            bool esPrimo = true;
            for (int j = 2; j < i; j++)
            {
                if (i % j == 0)
                {
                    esPrimo = false;
                    break;
                }
            }
            if(esPrimo)
            {
                contador++;
            }
        }

    return contador;
}

int* obtenerNumerosPrimos(int maximo, int *arraySize)
{
    int size = contarNumerosPrimos(maximo);
    int *array = (int*)calloc(size, sizeof(int));

    int arrayIndex = 0;
    for (int i = 2; i < maximo; i++){
            bool esPrimo = true;
            for (int j = 2; j < i; j++)
            {
                if (i % j == 0)
                {
                    esPrimo = false;
                    break;
                }
            }
            if(esPrimo)
            {
                *(array + arrayIndex) = i;
                arrayIndex++;
            }
        }

    *arraySize = size;

    return array;
}

